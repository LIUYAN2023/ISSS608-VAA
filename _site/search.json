[
  {
    "objectID": "In-class Exercise/In-class Exercise 5/In-class_Ex05.html",
    "href": "In-class Exercise/In-class Exercise 5/In-class_Ex05.html",
    "title": "In-class_Ex05",
    "section": "",
    "text": "show the code\nMC1 <- fromJSON(\"data/MC1.json\")\n\n\n\n\nshow the code\nMC1_nodes<- as_tibble(MC1$nodes) %>%\n  select(id,type,country)\n\nMC1_edges<- as_tibble(MC1$links) %>%\n  select(source,target, type, weight,key)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on_Ex05",
    "section": "",
    "text": "2. Creating network objects using tidygraph\nIn this section, we will present how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\n\nThe tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\na node data.frame and an edge data.frame, data.frame, list, matrix from base, igraph from igraph, network from network, dendrogram and hclust from stats, Node from data.tree, phylo and evonet from ape, and graphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\nThe dplyr verbs in tidygraph\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\nUsing tbl_graph() to build tidygraph data model\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\n\nshow the code\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 54 × 4\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# ℹ 48 more rows\n#\n# A tibble: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges. The command also prints the first six rows of “Node Data” and the first three of “Edge Data”. It states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\nChanging the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\n\nshow the code\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 1,372 × 4\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# ℹ 1,366 more rows\n#\n# A tibble: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function.\n\n\n\n3. Plotting Static Network Graphs with ggraph package\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\nnodes, edges and layouts. For a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\nPlotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\n\nshow the code\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\nChanging the default network graph theme\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\n\nshow the code\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\nChanging the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\n\nshow the code\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\nWorking with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\nFruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\n\nshow the code\ng <- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\nThing to learn from the code chunk above:\nlayout argument is used to define the layout to be used.\n\n\nModifying network nodes\nIn this section, you will colour each node by referring to their respective departments.\n\n\nshow the code\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\nThings to learn from the code chunks above:\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\nModifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\n\nshow the code\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\nThings to learn from the code chunks above:\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n\n\n\n4. Creating facet graphs\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\nWorking with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nshow the code\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\nWorking with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\n\nshow the code\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\nA framed facet graph\nThe code chunk below adds frame to each graph.\n\n\nshow the code\nset_graph_style() \n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\nWorking with facet_nodes()\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nshow the code\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n5. Network Metrics Analysis\n\nComputing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\n\nshow the code\ng <- GAStech_graph %>%\n  mutate(betweenness_centrality = centrality_betweenness()) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\nThings to learn from the code chunk above:\nmutate() of dplyr is used to perform the computation. the algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\nVisualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n\nshow the code\ng <- GAStech_graph %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\nVisualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\n\nshow the code\ng <- GAStech_graph %>%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\nBuilding Interactive Network Graph with visNetwork\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns. The function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list. The resulting graph is fun to play around with.\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced. You can also zoom in and out on the plot and move it around to re-center it.\n\nData preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\n\nshow the code\nGAStech_edges_aggregated <- GAStech_edges %>%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %>%\n  rename(from = id) %>%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %>%\n  rename(to = id) %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(from, to) %>%\n    summarise(weight = n()) %>%\n  filter(from!=to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\n\n\n\nPlotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\n\nshow the code\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\n\n\n\n\nWorking with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\n\nshow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument.\n\n\nWorking with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\n\nshow the code\nGAStech_nodes <- GAStech_nodes %>%\n  rename(group = Department) \n\n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n\nshow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\nWorking with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges. - The argument arrows is used to define where to place the arrow. - The smooth argument is used to plot the edges using a smooth curve.\n\n\nshow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\nInteractivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation. - The argument highlightNearest highlights nearest when clicking a node. - The argument nodesIdSelection adds an id node selection creating an HTML select element.\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html",
    "href": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. if they are , then they will be lauched into R. - tidyverse: an opinionated collection of R packages designed for data science.\n\n\nshow the code\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nshow the code\nexam_data<-read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html#working-with-theme",
    "href": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html#working-with-theme",
    "title": "In-class Exercise 1",
    "section": "2.1 Working with Theme",
    "text": "2.1 Working with Theme\n\n\nshow the code\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"lightblue\", colour = \"lightblue\", \n                                    size = 0.5, linetype = \"solid\"),\n    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = \"white\"), \n    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = \"white\"))"
  },
  {
    "objectID": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-i",
    "href": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-i",
    "title": "In-class Exercise 1",
    "section": "2.2 Designing Data-drive Graphics for Analysis I",
    "text": "2.2 Designing Data-drive Graphics for Analysis I\n\n\nshow the code\nggplot(data=exam_data, \n       aes(x=reorder(RACE,RACE,\n                     function(x)-length(x)))) +\n  geom_bar() +\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100, 1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-i-1",
    "href": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-i-1",
    "title": "In-class Exercise 1",
    "section": "2.3 Designing Data-drive Graphics for Analysis I",
    "text": "2.3 Designing Data-drive Graphics for Analysis I\n\n\nshow the code\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iii",
    "href": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iii",
    "title": "In-class Exercise 1",
    "section": "2.4 Designing Data-drive Graphics for Analysis III",
    "text": "2.4 Designing Data-drive Graphics for Analysis III\n\n\nshow the code\nd <- exam_data   \nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = FALSE) +  \n  theme_bw()"
  },
  {
    "objectID": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iv",
    "href": "In-class Exercise/In-class Exercise 1/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iv",
    "title": "In-class Exercise 1",
    "section": "2.5 Designing Data-drive Graphics for Analysis IV",
    "text": "2.5 Designing Data-drive Graphics for Analysis IV\n\n\nshow the code\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_hline(yintercept=50,\n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1) + \n  geom_vline(xintercept=50, \n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1)"
  },
  {
    "objectID": "In-class Exercise/In-class Exercise 4/In-class_Ex04.html",
    "href": "In-class Exercise/In-class Exercise 4/In-class_Ex04.html",
    "title": "In-class_Ex01",
    "section": "",
    "text": "show the code\nexam_data <- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nshow the code\nggplot(exam_data,\n       aes(sample=ENGLISH))+stat_qq()+stat_qq_line()\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nwe can see that the points deviate significantly form the straight diagonal line. this is a clear indication that the set of data is not normally distributed.\n\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nshow the code\nqq <- ggplot(exam_data,\n       aes(sample=ENGLISH))+stat_qq()+stat_qq_line()\n\nsw_t <- exam_data %>%\n  shapiro_test(ENGLISH)%>%\n  gt()\n\ntmp <- tempfile(fileext = '.png')\ngtsave(sw_t,tmp)\ntable_png <- png::readPNG(tmp,\n                        native=TRUE)\n\nqq+table_png"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received.\n\nThis exercise aims to reveal the demographic and financial characteristics of the city of Engagement by using appropriate static and interactive statistical graphics methods. User-friendly and interactive solution will help planners to explore the complex data in an engaging way and reveal hidden patterns."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#install-r-packages-and-import-dataset",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#install-r-packages-and-import-dataset",
    "title": "Take-home_Ex01",
    "section": "2.1 Install R Packages and Import Dataset",
    "text": "2.1 Install R Packages and Import Dataset\nThe code chunk below uses pacman::p_load() to check if packages are installed. If they are, they will be launched into R. The packages installed are\npacthwork: Used to combine plots.\nDT:provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nrstatix: coherent with the ‘tidyverse’ design philosophy, for performing basic statistical tests, including t-test, Wilcoxon test, ANOVA, Kruskal-Wallis and correlation analyses.\nplotly: Used for creating interactive web-based graphs.\nggstatsplot: Used for creating graphics with details from statistical tests.\nggdist: Used for visualising distribution and uncertainty.\npng: read, write and display bitmap images stored in the PNG format.\nggthemes: Provide additional themes for ggplot2.\nggplot2:ggplot2 is a system for declaratively creating graphics.\nggiraph:ggiraph is a tool that allows you to create dynamic ggplot graphs.\ntreemap:offers great flexibility to draw treemaps.\ngridExtra:Provides a number of user-level functions to work with “grid” graphics, notably to arrange multiple grid-based plots on a page, and draw tables.\nggpubr:provides some easy-to-use functions for creating and customizing ‘ggplot2’- based publication ready plots.\ngt:Easily Create Presentation-Ready Display Tables.\nAll packages can be found within CRAN.\n\n\nshow the code\npacman::p_load(patchwork, DT,tidyverse, rstatix, plotly, ggstatsplot, ggdist, png,ggthemes, ggplot2, ggiraph, treemap,gridExtra, ggpubr,gt )\n\n\nDownload the data set\n\n\nshow the code\nFinancialJournal <- read_csv(\"data/FinancialJournal.csv\")\nParticipants <- read_csv(\"data/Participants.csv\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#data-introduction",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#data-introduction",
    "title": "Take-home_Ex01",
    "section": "2.2 Data Introduction",
    "text": "2.2 Data Introduction\nFor the purpose of this study, two data sets are provided. They are:\nParticipants.csv\nContains information about the residents of City of Engagement that have agreed to participate in this study.\nparticipantId (integer): unique ID assigned to each participant.\nhouseholdSize (integer): the number of people in the participant’s household\nhaveKids (boolean): whether there are children living in the participant’s household.\nage (integer): participant’s age in years at the start of the study.\neducationLevel (string factor): the participant’s education level, one of: {“Low”, “HighSchoolOrCollege”, “Bachelors”, “Graduate”}\ninterestGroup (char): a char representing the participant’s stated primary interest group, one of {“A”, “B”, “C”, “D”, “E”, “F”, “G”, “H”, “I”, “J”}. Note: specific topics of interest have been redacted to avoid bias.\njoviality (float): a value ranging from [0,1] indicating the participant’s overall happiness level at the start of the study.\nFinancialJournal.csv\nContains information about financial transactions.\nparticipantId (integer): unique ID corresponding to the participant affected\ntimestamp (datetime): the time when the check-in was logged\ncategory (string factor): a string describing the expense category, one of {“Education”, “Food”, “Recreation”, “RentAdjustment”, “Shelter”, “Wage”}\namount (double): the amount of the transaction"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#data-cleaning-and-wrangling",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#data-cleaning-and-wrangling",
    "title": "Take-home_Ex01",
    "section": "2.3 Data Cleaning and Wrangling",
    "text": "2.3 Data Cleaning and Wrangling\n\n2.3.1 Data Issue and Modification\n\n\n\n\n\n\n\n\nItem\nIssue\nSolution\n\n\n\n\n1\nwrong data type\ncheck & modify all the variable’s data type as per the data type indicated in dataset description\n\n\n2\n“RentAdjustment” is the refundable portion of rent, which belongs to the “shelter”\nreplace all the “RentAdjustment” with “shelter”\n\n\n3\n“timestamp” format is too complicated and not useable.\nConsider all the record belong to same year, so change “timestamp” to “month”\n\n\n4\nthere are 1,113 rows data are duplicates\nremove all duplicate rows in the FinancialJournal data table\n\n\n5\n131 nos of participantId only have less than 12 months record\nremove the rows with less than 12 months record\n\n\n\n\n\nshow the code\n# 1.Modify the data type###########################################################\n\n# Convert participantId from numeric to integer\nFinancialJournal$participantId <- as.integer(FinancialJournal$participantId)\n\n# Convert category from character to string factor with specified levels\nFinancialJournal$category <- factor(FinancialJournal$category, levels = c(\"Education\", \"Food\", \"Recreation\", \"RentAdjustment\", \"Shelter\", \"Wage\"))\n\n# Convert amount from numeric to double\nFinancialJournal$amount <- as.double(FinancialJournal$amount)\n\n# Convert participantId from numeric to integer\nParticipants$participantId <- as.integer(Participants$participantId)\n\n# Convert householdSize from numeric to integer\nParticipants$householdSize <- as.integer(Participants$householdSize)\n\n# Convert haveKids from logical to Boolean\nParticipants$haveKids <- as.logical(Participants$haveKids)\n\n# Convert age from numeric to integer\nParticipants$age <- as.integer(Participants$age)\n\n# Convert educationLevel from character to string factor with specified levels\nParticipants$educationLevel <- factor(Participants$educationLevel, levels = c(\"Low\", \"HighSchoolOrCollege\", \"Bachelors\", \"Graduate\"))\n\n# Convert joviality from numeric to float\nParticipants$joviality <- as.double(Participants$joviality)\n\n\n# 2. Replace all the \"RentAdjustment\" with \"shelter\"###############################\n\nFinancialJournal$category <- factor(ifelse(FinancialJournal$category == \"RentAdjustment\", \"Shelter\", as.character(FinancialJournal$category)))\n\n# 3. Extract new variable month from the timestamp#################################\n\nFinancialJournal <- FinancialJournal %>% \n  mutate(month = month(timestamp))\n\n# 4. Remove all duplicate rows in the FinancialJournal#############################\n\n# Check duplicate rows in the FinancialJournal data table\n# sum(duplicated(FinancialJournal))\n\n# Remove all duplicate rows in the FinancialJournal\nFinancialJournal <- distinct(FinancialJournal)\n\n\n# 5. remove the rows with less than 12 months record###############################\n\n# check the row with less than 12 months record\n#FinancialJournal %>% \n#  group_by(participantId) %>% \n#  filter(n_distinct(month) < 12) %>% \n#  distinct(participantId)\n\n# remove the rows with less than 12 months record\nFinancialJournal %>%\n  group_by(participantId) %>%\n  mutate(month_count = n_distinct(month)) %>%\n  filter(month_count >= 12) %>%\n  select(-month_count) -> FinancialJournal\n\n\n\n\n2.3.2 Reshape FinancialJournal and Data Table Join\nTo conduct a comprehensive analysis of participant demographics and their financial status, we implemented following steps:\n\nPerform a grouping operation on the “FinancialJournal” using the “participantId” and “category” variables, to obtain each participant’s monthly expenditure across different categories.\nReshape the new table to “Financial_wide”. Each row of “Financial_wide” contains one participant’s financial expenditures and income information.\nMerge the “Financial_wide” and “Participants” tables by the “participantId” variable, creating a new table “joined_table” that contains comprehensive information on participant demographic, expenditures, and income.\n\n\n\nshow the code\n# Group the rows of the \"FinancialJournal\" data table by \"participantId\" and \"category\"\nFinancial_sum <- FinancialJournal %>%\n  group_by(participantId, category) %>%\n  summarise(average_amount = sum(amount)/12) \n\n\n# Reshape the Financial_sum and make each \"category\" becomes a separate column \nFinancial_wide <- Financial_sum %>%\n  spread(category, average_amount)\n\n\n# Join the two Participants and Financial_wide by participantId\n\njoined_table <- Participants %>% \n                inner_join(Financial_wide, by = \"participantId\")\n\n\n\n\n2.3.3 New Variable Wrangling\nTo better utilize the available variables, we create several new variables as part of our data analysis process.\nTotal_Expenditure: aggregating all monthly expenditures on education, food, recreation, and shelter. This variable provides insight into the overall cost of living for each participant.\nSaving_Ratio: the difference between wage and total_expenditure divided by wage. This variable is a useful indicator of financial health and reflects the proportion of income that is being saved or invested for future needs.\nage_bin: binning the “age” variable into discrete categories based on the following age ranges: “<=30”, “>30 - 40”, “>40 - 50”, and “>50”. This variable serves as a categorical variable and enables us to analyze the characteristics of different age groups.\nWage_bin: binning the “wage” variable into income categories based on the following ranges: “<3000”, “3000 - <4000”, “4000 - <5000”, and “>=5000”. This variable serves as a categorical variable and facilitates the analysis of different income groups.\n\n\nshow the code\n# Create new columns \"Total_Expenditure\" and \"Saving_Ratio\"\njoined_table <- joined_table %>%\n  mutate(across(c(Education, Food, Recreation, Shelter), ~replace_na(., 0)),\n        Total_Expenditure = (Education + Food + Recreation + Shelter),\n        Saving_Ratio =( (Wage + Total_Expenditure)/Wage))\n        \n# Create age_bin column\njoined_table$age_bin <- cut(joined_table$age, \n                            breaks = c(-Inf, 30, 40, 50, Inf),\n                            labels = c(\"<=30\", \">30-40\", \">40-50\", \">50\"))\n\n# Create Wage_bin column\njoined_table$Wage_bin <- cut(joined_table$Wage,\n                             breaks = c(-Inf, 3000, 4000, 5000, Inf),\n                             labels = c(\"<3000\", \"3000-<4000\", \"4000-<5000\", \">=5000\"))\n\n\nShow the datatable after data cleaning & wrangling\n\n\nshow the code\n# Generate the datatable\nDT::datatable(joined_table, class= \"compact\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#analysis-on-financial-situation",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#analysis-on-financial-situation",
    "title": "Take-home_Ex01",
    "section": "3.2 Analysis on Financial Situation",
    "text": "3.2 Analysis on Financial Situation\nIn this section, we will focus on participant’s financial situation to analyse which factor has association with people’s income, and the difference in saving ration and total_expenditure under different group.\n\n3.2.1 Association Between Wage and Education/Age/Interset\nSignificant test of association (dependence) is an essential statistical technique used to determine whether two variables are related or associated with each other. One of the useful tools for performing this test in R is the ggbarstats().\n\nWage_bin vs EducationLevelWage_bin vs Age_binWage_bin vs HaveKids\n\n\n\n\nshow the code\n# Wage_bin vs EducationLevel\nggbarstats(joined_table, \n           x = Wage_bin, \n           y = educationLevel)\n\n\n\n\n\n\n\n\n\nshow the code\n# Wage_bin vs Age_bin\nggbarstats(joined_table, \n           x = age_bin, \n           y = haveKids)\n\n\n\n\n\n\n\n\n\nshow the code\n# Wage_bin vs HaveKids\nggbarstats(joined_table, \n           x = Wage_bin, \n           y = haveKids)\n\n\n\n\n\n\n\n\nSignificant Test of Association between Wage_bin vs educationLevel:\nThe result of this test suggests that there is a significant association between the variables “Wage_bin” and “educationLevel” in the dataset, as indicated by the low p-value (p=2.82e-69) and the high value of the X2pearson statistic (X2pearson(9)=346.91).\nThe V ̂cramerstatistic also indicates a moderate degree of association (V ̂ cramer =0.36). The CI95%[0.32,1.00] suggests that there is a 95% chance that the true value of the association between these variables falls within this interval, with a lower bound of 0.32 and an upper bound of 1.00.\nFinally, the Nobs value of 880 indicates that there were 880 observations used in the analysis.\nInsight:\n1. There is a significant association between “Wage_bin” and “educationLevel” in the dataset.\n- Nearly half of the survey participants belong to the high school or college student, or low education group, who report a relatively lower average monthly income.\n- Graduates have the highest representation in the high income group, followed by those with a bachelor’s degree.\n2. There is no association between the variables “Wage_bin” and ” Age_bin”, with P value = 0.44.\n3. There is a significant association between the variables “Wage_bin” and ” haveKids” in the dataset, people tend to have kids when they have a relatively higher income.\n\n\n3.2.2 Boxplot of Saving Ratio\nA boxplot, also known as a box and whisker plot, is a graphical representation used to display the spread and central tendency of a dataset. It provides measures of spread such as the interquartile range and mean, as well as measures of center such as the median and mean.\n\n\nshow the code\n#Create a box plot using plot_ly with specified layout and drop-down menu options\nplot_ly(data = joined_table,\n        x = ~educationLevel,\n        y = ~Saving_Ratio,\n        line = list(width =1),\n        type = \"box\",\n        colors = \"YlGnBu\",\n        showlegend = FALSE,\n        boxmean = TRUE\n        ) %>%\n \n  # Adding layout options, including a drop-down menu for selecting factors\n  layout(title = \"Boxplot of Saving Ratio by Selected Factors \",\n         xaxis = list(title = \"\"),\n         yaxis = list(title = \"Saving Ratio\"),\n         \n         updatemenus = list(list(type = 'dropdown',\n                         xref = \"paper\",\n                         yref = \"paper\",\n                         xanchor = \"left\",\n                         x = 0.01, \n                         y = 0.99,\n                         buttons = list(\n                           list(method = \"update\",\n                                args = list(list(x = list(joined_table$educationLevel)),\n                                            list(xaxis = list(categoryorder = \"category ascending\"))),\n                                label = \"educationLevel\"),\n                           list(method = \"update\",\n                                args = list(list(x = list(joined_table$haveKids)),\n                                            list(xaxis = list(categoryorder = \"category ascending\"))),\n                                label = \"haveKids\"),\n                          list(method = \"update\",\n                                args = list(list(x = list(joined_table$householdSize)),\n                                            list(xaxis = list(categoryorder = \"category ascending\"))),\n                                label = \"householdSize\")\n                           \n                         )\n                    )\n         )\n\n)\n\n\n\n\n\n\n\nSaving Ratio vs Education Level: it can be observed that graduates have the highest mean saving ratio, while those with low education level have the lowest mean saving ratio. Moreover, it is worth noting that there is a higher presence of outliers for the group of graduates.\nSaving Ratio vs Have Kids: the box plot indicates that both groups, i.e., those with and without kids, have similar mean and median saving ratios. However, the dispersion, as measured by the interquartile range, is smaller for the group of individuals who have kids.\nSaving Ratio vs Household Size: the box plot reveals that the median saving ratio for households with two people is lower compared to those household size with one or three people. Additionally, the group with one person in the household has the largest dispersion of saving ratios.\n\n\n\n3.2.3 Boxplot of Total_Expenditure\n\n\nshow the code\n# Create new column  \"Total_livingcost\" by taking the absolute value of \"Total_Expenditure\".\njoined_table$Total_livingcost <- abs(joined_table$Total_Expenditure)\n\n#Create a box plot using plot_ly with specified layout and drop-down menu options\nplot_ly(data = joined_table,\n        x = ~educationLevel,\n        y = ~Total_livingcost,\n        line = list(width =1),\n        type = \"box\",\n        colors = \"YlGnBu\",\n        showlegend = FALSE,\n        boxmean = TRUE\n        ) %>%\n \n  # Adding layout options, including a drop-down menu for selecting factors\n  layout(title = \"Boxplot of Total_Expenditure by selected factors \",\n         xaxis = list(title = \"\"),\n         yaxis = list(title = \"Total_Expenditure\"),\n         \n         updatemenus = list(list(type = 'dropdown',\n                         xref = \"paper\",\n                         yref = \"paper\",\n                         xanchor = \"left\",\n                         x = 0.01, \n                         y = 0.99,\n                         buttons = list(\n                           list(method = \"update\",\n                                args = list(list(x = list(joined_table$educationLevel)),\n                                            list(xaxis = list(categoryorder = \"category ascending\"))),\n                                label = \"educationLevel\"),\n                           list(method = \"update\",\n                                args = list(list(x = list(joined_table$haveKids)),\n                                            list(xaxis = list(categoryorder = \"category ascending\"))),\n                                label = \"haveKids\"),\n                          list(method = \"update\",\n                                args = list(list(x = list(joined_table$householdSize)),\n                                            list(xaxis = list(categoryorder = \"category ascending\"))),\n                                label = \"householdSize\")\n                              \n                           \n                         )\n                    )\n         )\n\n)\n\n\n\n\n\n\n\nTotal Expenditure vs Education Level: the mean monthly living cost does not vary significantly among different education levels. Besides, the dispersion of the monthly living cost is smaller for individuals with a lower level of education and for those with a high school or college degree, compared to those with a bachelor’s or graduate degree.\nTotal Expenditure vs Have Kids : In comparing the mean monthly living costs of demographic groups with and without children, it was found that households with children experience a higher mean average monthly cost of living compared to those without.\nTotal Expenditure vs household size : it can be observed that as the household size increases, the total living cost also increases."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#analysis-on-joviality",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#analysis-on-joviality",
    "title": "Take-home_Ex01",
    "section": "3.3 Analysis on Joviality",
    "text": "3.3 Analysis on Joviality\nMaintaining a jovial attitude can be a contributing factor to a more harmonious social environment and can improve overall well-being. In this section, we will conduct an analysis of the factors that affect citizens’ joviality and explore the differences in joviality levels across various demographic groups.\n\n3.3.1 Significant Test of Correlation\n\n\nshow the code\n# Define two scatter plots with ggscatterstats function\np1 <- ggscatterstats(\ndata = joined_table,\nx = Saving_Ratio,\ny = joviality,\nmarginal = FALSE,\n) +\n#Set the horizontal position of the title to the center of the plot\ntheme(plot.title = element_text(hjust = 0.5)) +\nggtitle(\"Joviality and Saving_Ratio\")\n\np2 <- ggscatterstats(\ndata = joined_table,\nx = Wage,\ny = joviality,\nmarginal = FALSE,\n) +\n#Set the horizontal position of the title to the center of the plot\ntheme(plot.title = element_text(hjust = 0.5)) +\nggtitle(\"Joviality and Wage\")\n\np1 + p2\n\n\n\n\n\n\n\nshow the code\n# Define two scatter plots with ggscatterstats function\njoined_table$Recreation_cost <- abs(joined_table$Recreation)\np3 <- ggscatterstats(\ndata = joined_table,\nx = Recreation_cost,\ny = joviality,\nmarginal = FALSE,\n) +\n#Set the horizontal position of the title to the center of the plot\ntheme(plot.title = element_text(hjust = 0.5)) +\nggtitle(\"Joviality and Recreation_cost\")\n\njoined_table$Food_cost <- abs(joined_table$Food)\np4 <- ggscatterstats(\ndata = joined_table,\nx = Food_cost,\ny = joviality,\nmarginal = FALSE,\n) +\n#Set the horizontal position of the title to the center of the plot\ntheme(plot.title = element_text(hjust = 0.5)) +\nggtitle(\"Joviality and Food_cost\")\n\np3+p4\n\n\n\n\n\nThese results suggest that there are significant correlations between joviality and the variables of Saving_Ratio, Recreation, and Food, but a weaker correlation with Wage.\n\nThe p-values for all four tests are very small, indicating a low likelihood of obtaining such strong correlations by chance.\nThe signs of the correlation coefficients suggest that as Recreation, and Food increase, Joviality tends to increase as well, whereas for saving ratio and Wage, Joviality tends to decrease as these two variables increases.\nThe correlation coefficient rPreason measures the strength and direction of the linear relationship between the variables. In this case, a value of -0.56, -0.3, 0.55, and 0.57 respectively suggests a moderate to strong negative correlation for Saving_Ratio and Wage, and moderate to strong positive correlation for Recreation and Food.\n\n\n\n3.3.2 Oneway ANOVA Test of Joviality\n\n\nNormality Assumption\nBefore performing the necessary hypothesis testing, we need to choose between parametric and non-parametric test. perform Shapiro-Wilk normality test with confidence level of 95% to test the null hypothesis that the joviality by different factor(education_level,age,have kids) is normally distributed.\n\nJoviality by EducationLevelJoviality by Age_binJoviality by HaveKids\n\n\n\n\nshow the code\n# Create a data frame with two variables\ndf <- data.frame(\n  group = joined_table$educationLevel,\n  joviality = joined_table$joviality\n)\n\n# Create a QQ plot with a normal distribution line \nqq_plot <- ggplot(df, aes(sample = joviality)) +\n  stat_qq() + \n  stat_qq_line() +\n  facet_wrap(~group)\n\n# Perform Shapiro-Wilk normality test \ntable_gts <- lapply(unique(df$group), function(x) {\n  sw_t <- df %>%\n    filter(group == x) %>%\n    shapiro_test(joviality) %>%\n    gt()\n  tmp <- tempfile(fileext = '.png')\n  gtsave(sw_t, tmp)\n  png::readPNG(tmp, native = TRUE)\n})\n\n# Arrange the QQ plots of each education level group in a grid\nggarrange(qq_plot, ncol = 1, nrow = 1)\n\n\n\n\n\n\n\n\n\nshow the code\n# Create a data frame with two variables\ndf <- data.frame(\n  group = joined_table$age_bin,\n  joviality = joined_table$joviality\n)\n\n# Create a QQ plot with a normal distribution line \nqq_plot <- ggplot(df, aes(sample = joviality)) +\n  stat_qq() + \n  stat_qq_line() +\n  facet_wrap(~group)\n\n# Perform Shapiro-Wilk normality test \ntable_gts <- lapply(unique(df$group), function(x) {\n  sw_t <- df %>%\n    filter(group == x) %>%\n    shapiro_test(joviality) %>%\n    gt()\n  tmp <- tempfile(fileext = '.png')\n  gtsave(sw_t, tmp)\n  png::readPNG(tmp, native = TRUE)\n})\n\n\n# Arrange the QQ plots of each education level group in a grid\nggarrange(qq_plot, ncol = 1, nrow = 1)\n\n\n\n\n\n\n\n\n\nshow the code\n# Create a data frame with two variables\ndf <- data.frame(\n  group = joined_table$haveKids,\n  joviality = joined_table$joviality\n)\n\n# Create a QQ plot with a normal distribution line\nqq_plot <- ggplot(df, aes(sample = joviality)) +\n  stat_qq() + \n  stat_qq_line() +\n  facet_wrap(~group)\n\n# Perform Shapiro-Wilk normality test \ntable_gts <- lapply(unique(df$group), function(x) {\n  sw_t <- df %>%\n    filter(group == x) %>%\n    shapiro_test(joviality) %>%\n    gt()\n  tmp <- tempfile(fileext = '.png')\n  gtsave(sw_t, tmp)\n  png::readPNG(tmp, native = TRUE)\n})\n\n# Arrange the QQ plots of each education level group in a grid\nggarrange(qq_plot, ncol = 1, nrow = 1)\n\n\n\n\n\n\n\n\nBased on the result above, the null hypothesis is rejected as some of the distributions are below 0.05 critical value. As such, we are not able to confirm normality assumption for distribution of joviality by education_level/age/have kids.\n\n\n\n\n\n\nNote\n\n\n\nSince we are unable to confirm normality assumption, non-parametric test (Kruskal-Wallis and Mann-Whitney) will be used for hypothesis testing. Note that the null hypothesis is no difference between median joviality by EducationLevel/Age_bin/HaveKids.\n\n\n\nJoviality by EducationLevelJoviality by Age_binJoviality by HaveKids\n\n\n\n\nshow the code\n#set the color pallete\ncol13_1 <- c(\"dodgerblue2\", \"#E31A1C\", \n  \"green4\",\n  \"#6A3D9A\", \n  \"#FF7F00\", \n  \"gray30\", \"gold1\",\n  \"skyblue2\", \"#FB9A99\", \n  \"palegreen2\",\n  \"#CAB2D6\", \n  \"#FDBF6F\", \n  \"gray80\") \n  \n#Initiating the base plot\np1 <- ggbetweenstats(\n  data = joined_table|> \n    group_by(educationLevel),\n  x = educationLevel, \n  y = joviality, \n  ylab = \"joviality\",\n  title = \"One-way ANOVA Reveal Difference on Joviality across Different Education Level\",\n  type = \"np\", \n  pairwise.comparisons = TRUE,\n  pairwise.display = \"ns\",\n  mean.ci = TRUE,\n  p.adjust.method = \"fdr\", \n  messages = FALSE \n  ) +\n  scale_color_manual(values = col13_1) +\n  theme(axis.title.x = element_blank()) +\n  scale_y_continuous(limits = c(0, 1))\n\np1\n\n\n\n\n\n\n\n\n\nshow the code\n#set the color pallete\ncol13_1 <- c(\"dodgerblue2\", \"#E31A1C\", \n  \"green4\",\n  \"#6A3D9A\", \n  \"#FF7F00\", \n  \"gray30\", \"gold1\",\n  \"skyblue2\", \"#FB9A99\", \n  \"palegreen2\",\n  \"#CAB2D6\", \n  \"#FDBF6F\", \n  \"gray80\") \n  \n#Initiating the base plot\np2 <- ggbetweenstats(\n  data = joined_table|> \n    group_by(age_bin),\n  x = age_bin, \n  y = joviality, \n  ylab = \"joviality\",\n  title = \"One-way ANOVA Reveal Difference on Joviality across Different Age Range\",\n  type = \"np\", \n  pairwise.comparisons = TRUE,\n  pairwise.display = \"ns\",\n  mean.ci = TRUE,\n  p.adjust.method = \"fdr\", \n  messages = FALSE \n  ) +\n  scale_color_manual(values = col13_1) +\n  theme(axis.title.x = element_blank()) +\n  scale_y_continuous(limits = c(0, 1))\n\np2\n\n\n\n\n\n\n\n\n\nshow the code\nggbetweenstats(\n  data = joined_table,\n  x = haveKids, \n  y = joviality,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\nJoviality by EducationLevel: based on the statistical analysis conducted, the p-value was found to be less than the critical value of 0.05. Therefore, there is sufficient statistical evidence to reject the null hypothesis and conclude that there is a difference in median joviality between different education level groups.\nJoviality by Age/haveKids: the statistical analysis did not provide enough evidence to reject the null hypothesis. Therefore, we can conclude that there is no significant difference in median joviality for different age ranges or whether individuals have kids."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#analysis-on-participant-profile",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#analysis-on-participant-profile",
    "title": "Take-home_Ex01",
    "section": "3.1 Analysis on Participant Profile",
    "text": "3.1 Analysis on Participant Profile\nInitially, our analysis will entail a comprehensive review of the participant profile in order to obtain a holistic understanding of the sample population’s characteristics, which will serve as a foundation for subsequent result analysis.\n\n3.1.1 Age Distribution\nThe age range of the participants is between 15 and 60 years old, and the distribution appears to be relatively even with a notable proportion of individuals in middle age.\n\n\nshow the code\n#Creating a plot object using ggplot \np <- ggplot(data=Participants, aes(x = age)) +\n  #Adding an interactive dotplot layer\n  geom_dotplot_interactive(         \n    aes(data_id = interestGroup),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",\n    dotsize = 0.5) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n#Creating an interactive plot using girafe\ngirafe(\n  ggobj = p,                             \n  width_svg = 10,                         \n  height_svg = 10*0.618,\n  #Adding hover options\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nElements associated with interestGroup will be highlighted upon mouse over.\n\n\n\n\n3.1.2 Age vs HaveKids Pyramid\nFrom Age vs HaveKids pyramid, we can find there is a higher prevalence of individuals without children across various age levels in the participant population.\n\n\nshow the code\n# create age groups using cut function\nParticipants$age_level <- cut(Participants$age, breaks = seq(0, 100, by = 5), include.lowest = TRUE)\n\n# aggregate data by age level and haveKids\nAge_haveKids <- aggregate(participantId ~ age_level + haveKids, data = Participants, FUN = length)\n\n# rename the column to population\ncolnames(Age_haveKids)[3] <- \"population\"\n\n# sort the data by age level and haveKids\nAge_haveKids <- Age_haveKids[order(Age_haveKids$age_level, Age_haveKids$haveKids), ]\n\nAge_haveKids$population <- ifelse(Age_haveKids$haveKids == \"TRUE\",-1*Age_haveKids$population,Age_haveKids$population)\n\nage_cohort <- ggplot(Age_haveKids,aes(x = age_level, y = population,fill = haveKids))+\n  geom_bar(stat = \"identity\") +\n  scale_y_continuous(breaks = seq(-150, 150, 50), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))))) +\n  coord_flip()\n\nage_cohort +\n  ggtitle(\"Participant Population by HaveKids\")+\n  xlab(\"Age Group\")+\n  ylab(\"Population\")+\n  scale_fill_manual(values=c('lightpink2','steelblue3'))+\n  theme_economist()+\n  theme(legend.position='right')\n\n\n\n\n\n\n\n3.1.3 Tree Map for InterestGroup\nIt is evident that the population of the different interest groups is comparable, with J and H showing marginally higher proportions.\n\n\nshow the code\n# calculate total number of participants\ntotal <- nrow(Participants)\n\n# aggregate data by interest group\nInterest_population <- aggregate(participantId ~ interestGroup, data = Participants, FUN = length)\n\n# calculate proportion of each interest group\nInterest_population$proportion <- round(Interest_population$participantId / total * 100, 2)\n\n# create treemap\ntreemap(Interest_population, index = c(\"interestGroup\"), vSize = \"proportion\",\n        type = \"index\", palette = \"Blues\", title = \"Proportion of Participants by Interest Group\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#joviality-by-age_bin-1",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#joviality-by-age_bin-1",
    "title": "Take-home_Ex01",
    "section": "Joviality by Age_bin",
    "text": "Joviality by Age_bin\n\n\nshow the code\n#set the color pallete\ncol13_1 <- c(\"dodgerblue2\", \"#E31A1C\", \n  \"green4\",\n  \"#6A3D9A\", \n  \"#FF7F00\", \n  \"gray30\", \"gold1\",\n  \"skyblue2\", \"#FB9A99\", \n  \"palegreen2\",\n  \"#CAB2D6\", \n  \"#FDBF6F\", \n  \"gray80\") \n  \n#Initiating the base plot\np2 <- ggbetweenstats(\n  data = joined_table|> \n    group_by(age_bin),\n  x = age_bin, \n  y = joviality, \n  ylab = \"joviality\",\n  title = \"One-way ANOVA Reveal Difference on Joviality across Different Age Range\",\n  type = \"np\", \n  pairwise.comparisons = TRUE,\n  pairwise.display = \"ns\",\n  mean.ci = TRUE,\n  p.adjust.method = \"fdr\", \n  messages = FALSE \n  ) +\n  scale_color_manual(values = col13_1) +\n  theme(axis.title.x = element_blank()) +\n  scale_y_continuous(limits = c(0, 1))\n\np2"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#joviality-by-havekids-1",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home_Ex01.html#joviality-by-havekids-1",
    "title": "Take-home_Ex01",
    "section": "Joviality by HaveKids",
    "text": "Joviality by HaveKids\n\n\nshow the code\nggbetweenstats(\n  data = joined_table,\n  x = haveKids, \n  y = joviality,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\nThere was a significant association between joviality and education level, as indicated by a X2Kruskal-Wallis test statistic of 13.50 with a p-value of 3.67e-03.\nThe effect size (e^2 ordinal) was 0.02, suggesting that education level accounted for a small but meaningful proportion of the variation in joviality scores.\nThe 95% confidence interval for the effect size ranged from 6.53e-03 to 1.00, indicating a relatively wide range of possible effect sizes.\nThere were no significant associations found between joviality and age and having kids:\n-For age, the X2Kruskal-Wallis test statistic was 5.72 with a p-value of 0.13, and the effect size (e^2 ordinal) was 6.51e-03 with a 95% confidence interval ranging from 1.51e-03 to 1.00.\n-For having kids, the X2Mann-Whitney test statistic was 81868 with a p-value of 0.28, and the effect size (r_ordinal^rank) was 0.05 with a 95% confidence interval ranging from -0.04 to 0.13."
  }
]