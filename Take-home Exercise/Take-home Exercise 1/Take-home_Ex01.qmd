---
title: "Take-home_Ex01"
author: "LIU YAN"
date: "14 May 2023"
editor: visual
---

# 1. Overview

City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received.

![](/images/take-home_01.jpg)

This exercise aims to reveal the demographic and financial characteristics of the city of Engagement by using appropriate static and interactive statistical graphics methods. User-friendly and interactive solution will help planners to explore the complex data in an engaging way and reveal hidden patterns.

# 2. Data Preparation

## 2.1 Install R Packages and Import Dataset

The code chunk below uses pacman::p_load() to check if packages are installed. If they are, they will be launched into R. The packages installed are

[pacthwork](https://patchwork.data-imaginist.com/): Used to combine plots.

[DT](https://rstudio.github.io/DT/):provides an R interface to the JavaScript library DataTables that create interactive table on html page.

[tidyverse](https://www.tidyverse.org/): A collection of core packages designed for data science, used extensively for data preparation and wrangling.

[rstatix](https://cran.r-project.org/web/packages/rstatix/index.html): coherent with the 'tidyverse' design philosophy, for performing basic statistical tests, including t-test, Wilcoxon test, ANOVA, Kruskal-Wallis and correlation analyses.

[plotly](https://plotly.com/r/): Used for creating interactive web-based graphs.

[ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/): Used for creating graphics with details from statistical tests.

[ggdist](https://mjskay.github.io/ggdist/): Used for visualising distribution and uncertainty.

[png](https://cran.r-project.org/web/packages/png/index.html): read, write and display bitmap images stored in the PNG format.

[ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/): Provide additional themes for ggplot2.

[ggplot2](https://ggplot2.tidyverse.org/):ggplot2 is a system for declaratively creating graphics.

[ggiraph](https://davidgohel.github.io/ggiraph/):ggiraph is a tool that allows you to create dynamic ggplot graphs.

[treemap](https://cran.r-project.org/web/packages/treemap/index.html):offers great flexibility to draw treemaps.

[gridExtra](https://cran.r-project.org/web/packages/gridExtra/index.html):Provides a number of user-level functions to work with "grid" graphics, notably to arrange multiple grid-based plots on a page, and draw tables.

[ggpubr](https://cran.r-project.org/web/packages/ggpubr/index.html):provides some easy-to-use functions for creating and customizing 'ggplot2'- based publication ready plots.

[gt](https://cran.r-project.org/web/packages/gt/index.html):Easily Create Presentation-Ready Display Tables.

[ggridges](https://wilkelab.org/ggridges/):a ggplot2 extension specially designed for plotting ridgeline plots.

All packages can be found within CRAN.

```{r}
pacman::p_load(patchwork, DT,tidyverse, rstatix, plotly, ggstatsplot, ggdist, png,ggthemes, ggplot2, ggiraph, treemap,gridExtra, ggpubr,gt,ggridges)

```

Download the data set

```{r}

FinancialJournal <- read_csv("data/FinancialJournal.csv")
Participants <- read_csv("data/Participants.csv")

```

## 2.2 Data Introduction

For the purpose of this study, two data sets are provided. They are:

**Participants.csv**

Contains information about the residents of City of Engagement that have agreed to participate in this study.

`participantId` (integer): unique ID assigned to each participant.

`householdSize` (integer): the number of people in the participant's household

`haveKids` (boolean): whether there are children living in the participant's household.

`age` (integer): participant's age in years at the start of the study.

`educationLevel` (string factor): the participant's education level, one of: {"Low", "HighSchoolOrCollege", "Bachelors", "Graduate"}

`interestGroup` (char): a char representing the participant's stated primary interest group, one of {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J"}. Note: specific topics of interest have been redacted to avoid bias.

`joviality` (float): a value ranging from \[0,1\] indicating the participant's overall happiness level at the start of the study.

**FinancialJournal.csv**

Contains information about financial transactions.

`participantId` (integer): unique ID corresponding to the participant affected

`timestamp` (datetime): the time when the check-in was logged

`category` (string factor): a string describing the expense category, one of {"Education", "Food", "Recreation", "RentAdjustment", "Shelter", "Wage"}

`amount` (double): the amount of the transaction

## 2.3 Data Cleaning and Wrangling

### 2.3.1 Data Issue and Modification

| Item | Issue                                                                              | Solution                                                                                          |
|:-----------------:|:------------------------|:----------------------------|
|  1   | wrong data type                                                                    | check & modify all the variable's data type as per the data type indicated in dataset description |
|  2   | "RentAdjustment" is the refundable portion of rent, which belongs to the "shelter" | replace all the "RentAdjustment" with "shelter"                                                   |
|  3   | "timestamp" format is too complicated and not useable.                             | Consider all the record belong to same year, so change "timestamp" to "month"                     |
|  4   | there are 1,113 rows data are duplicates                                           | remove all duplicate rows in the FinancialJournal data table                                      |
|  5   | 131 nos of participantId only have less than 12 months record                      | remove the rows with less than 12 months record                                                   |

```{r}

# 1.Modify the data type###########################################################

# Convert participantId from numeric to integer
FinancialJournal$participantId <- as.integer(FinancialJournal$participantId)

# Convert category from character to string factor with specified levels
FinancialJournal$category <- factor(FinancialJournal$category, levels = c("Education", "Food", "Recreation", "RentAdjustment", "Shelter", "Wage"))

# Convert amount from numeric to double
FinancialJournal$amount <- as.double(FinancialJournal$amount)

# Convert participantId from numeric to integer
Participants$participantId <- as.integer(Participants$participantId)

# Convert householdSize from numeric to integer
Participants$householdSize <- as.integer(Participants$householdSize)

# Convert haveKids from logical to Boolean
Participants$haveKids <- as.logical(Participants$haveKids)

# Convert age from numeric to integer
Participants$age <- as.integer(Participants$age)

# Convert educationLevel from character to string factor with specified levels
Participants$educationLevel <- factor(Participants$educationLevel, levels = c("Low", "HighSchoolOrCollege", "Bachelors", "Graduate"))

# Convert joviality from numeric to float
Participants$joviality <- as.double(Participants$joviality)


# 2. Replace all the "RentAdjustment" with "shelter"###############################

FinancialJournal$category <- factor(ifelse(FinancialJournal$category == "RentAdjustment", "Shelter", as.character(FinancialJournal$category)))

# 3. Extract new variable month from the timestamp#################################

FinancialJournal <- FinancialJournal %>% 
  mutate(month = month(timestamp))

# 4. Remove all duplicate rows in the FinancialJournal#############################

# Check duplicate rows in the FinancialJournal data table
# sum(duplicated(FinancialJournal))

# Remove all duplicate rows in the FinancialJournal
FinancialJournal <- distinct(FinancialJournal)


# 5. remove the rows with less than 12 months record###############################

# check the row with less than 12 months record
#FinancialJournal %>% 
#  group_by(participantId) %>% 
#  filter(n_distinct(month) < 12) %>% 
#  distinct(participantId)

# remove the rows with less than 12 months record
FinancialJournal %>%
  group_by(participantId) %>%
  mutate(month_count = n_distinct(month)) %>%
  filter(month_count >= 12) %>%
  select(-month_count) -> FinancialJournal

```

### 2.3.2 Reshape FinancialJournal and Data Table Join

To conduct a comprehensive analysis of participant demographics and their financial status, we implemented following steps:

-   Perform a grouping operation on the "FinancialJournal" using the "participantId" and "category" variables, to obtain each participant's monthly expenditure across different categories.

-   Reshape the new table to "Financial_wide". Each row of "Financial_wide" contains one participant's financial expenditures and income information.

-   Merge the "Financial_wide" and "Participants" tables by the "participantId" variable, creating a new table "joined_table" that contains comprehensive information on participant demographic, expenditures, and income.

```{r}
# Group the rows of the "FinancialJournal" data table by "participantId" and "category"
Financial_sum <- FinancialJournal %>%
  group_by(participantId, category) %>%
  summarise(average_amount = sum(amount)/12) 


# Reshape the Financial_sum and make each "category" becomes a separate column 
Financial_wide <- Financial_sum %>%
  spread(category, average_amount)


# Join the two Participants and Financial_wide by participantId

joined_table <- Participants %>% 
                inner_join(Financial_wide, by = "participantId")

```

### 2.3.3 New Variable Wrangling

To better utilize the available variables, we create several new variables as part of our data analysis process.

`Total_Expenditure`: aggregating all monthly expenditures on education, food, recreation, and shelter. This variable provides insight into the overall cost of living for each participant.

`Saving_Ratio`: the difference between wage and total_expenditure divided by wage. This variable is a useful indicator of financial health and reflects the proportion of income that is being saved or invested for future needs.

`age_bin`: binning the "age" variable into discrete categories based on the following age ranges: "\<=30", "\>30 - 40", "\>40 - 50", and "\>50". This variable serves as a categorical variable and enables us to analyze the characteristics of different age groups.

`Wage_bin`: binning the "wage" variable into income categories based on the following ranges: "\<3000", "3000 - \<4000", "4000 - \<5000", and "\>=5000". This variable serves as a categorical variable and facilitates the analysis of different income groups.

```{r}

# Create new columns "Total_Expenditure" and "Saving_Ratio"
joined_table <- joined_table %>%
  mutate(across(c(Education, Food, Recreation, Shelter), ~replace_na(., 0)),
        Total_Expenditure = (Education + Food + Recreation + Shelter),
        Saving_Ratio =( (Wage + Total_Expenditure)/Wage))
        
# Create age_bin column
joined_table$age_bin <- cut(joined_table$age, 
                            breaks = c(-Inf, 30, 40, 50, Inf),
                            labels = c("<=30", ">30-40", ">40-50", ">50"))

# Create Wage_bin column
joined_table$Wage_bin <- cut(joined_table$Wage,
                             breaks = c(-Inf, 3000, 4000, 5000, Inf),
                             labels = c("<3000", "3000-<4000", "4000-<5000", ">=5000"))


```

Show the datatable after data cleaning & wrangling

```{r}
# Generate the datatable
DT::datatable(joined_table, class= "compact")

```

# 3. Data Visualisation

## 3.1 Analysis on Participant Profile

Initially, our analysis will entail a comprehensive review of the participant profile in order to obtain a holistic understanding of the sample population's characteristics, which will serve as a foundation for subsequent result analysis.

### 3.1.1 Age Distribution

The age range of the participants is between 15 and 60 years old, and the distribution appears to be relatively even with a notable proportion of individuals in middle age.

```{r}

#Creating a plot object using ggplot 
p <- ggplot(data=Participants, aes(x = age)) +
  #Adding an interactive dotplot layer
  geom_dotplot_interactive(         
    aes(data_id = interestGroup),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot",
    dotsize = 0.5) +
  scale_y_continuous(NULL, breaks = NULL)

#Creating an interactive plot using girafe
girafe(
  ggobj = p,                             
  width_svg = 10,                         
  height_svg = 10*0.618,
  #Adding hover options
  options = list(
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )
)

```

::: callout-note
Elements associated with interestGroup will be highlighted upon mouse over.
:::

### 3.1.2 Age vs HaveKids Pyramid

From Age vs HaveKids pyramid, we can find there is a higher prevalence of individuals without children across various age levels in the participant population.

```{r}

# create age groups using cut function
Participants$age_level <- cut(Participants$age, breaks = seq(0, 100, by = 5), include.lowest = TRUE)

# aggregate data by age level and haveKids
Age_haveKids <- aggregate(participantId ~ age_level + haveKids, data = Participants, FUN = length)

# rename the column to population
colnames(Age_haveKids)[3] <- "population"

# sort the data by age level and haveKids
Age_haveKids <- Age_haveKids[order(Age_haveKids$age_level, Age_haveKids$haveKids), ]

Age_haveKids$population <- ifelse(Age_haveKids$haveKids == "TRUE",-1*Age_haveKids$population,Age_haveKids$population)

age_cohort <- ggplot(Age_haveKids,aes(x = age_level, y = population,fill = haveKids))+
  geom_bar(stat = "identity") +
  scale_y_continuous(breaks = seq(-150, 150, 50), 
                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))))) +
  coord_flip()

age_cohort +
  ggtitle("Participant Population by HaveKids")+
  xlab("Age Group")+
  ylab("Population")+
  scale_fill_manual(values=c('lightpink2','steelblue3'))+
  theme_economist()+
  theme(legend.position='right')

```

### 3.1.3 Tree Map for InterestGroup

It is evident that the population of the different interest groups is comparable, with J and H showing marginally higher proportions.

```{r}
# calculate total number of participants
total <- nrow(Participants)

# aggregate data by interest group
Interest_population <- aggregate(participantId ~ interestGroup, data = Participants, FUN = length)

# calculate proportion of each interest group
Interest_population$proportion <- round(Interest_population$participantId / total * 100, 2)

# create treemap
treemap(Interest_population, index = c("interestGroup"), vSize = "proportion",
        type = "index", palette = "Blues", title = "Proportion of Participants by Interest Group") 


```

## 3.2 Analysis on Financial Situation

In this section, we will focus on participant's financial situation to analyse which factor has association with people's income, and the difference in saving ration and total_expenditure under different group.

### 3.2.1 Wage Distribution by Month

The salary distribution exhibits a mild right skew, and the aggregate salary level for March surpasses that of other months.

```{r}
# Groupe the rows of the "FinancialJournal" data table by "participantId" ,"month"and "category"
Financial_sum1 <- FinancialJournal %>%
  group_by(participantId, category,month) %>%
  summarise(average_amount1 = sum(amount)/12) 

# Reshape the Financial_sum and make each "category" becomes a separate column 
Financial_wide1 <- Financial_sum1 %>%
  spread(category, average_amount1)

# Conver the month to factor data type
Financial_wide1$month <- factor(Financial_wide1$month, levels = c("1", "2", "3","4","5","6","7","8","9","10","11","12"))

#Create a density ridgeline plot to visualize the distribution of wages over months
ggplot(Financial_wide1,
       aes(x = Wage, 
           y = month, 
           fill = factor(stat(quantile))
           )) +
  #Create density ridgelines
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()

```

### 3.2.2 Association Between Wage and Education/Age/Interset

Significant test of association (dependence) is an essential statistical technique used to determine whether two variables are related or associated with each other. One of the useful tools for performing this test in R is the [ggbarstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html).

::: panel-tabset
## Wage_bin vs EducationLevel

```{r}
# Wage_bin vs EducationLevel
ggbarstats(joined_table, 
           x = Wage_bin, 
           y = educationLevel)
```

## Wage_bin vs Age_bin

```{r}
# Wage_bin vs Age_bin
ggbarstats(joined_table, 
           x = age_bin, 
           y = haveKids)



```

## Wage_bin vs HaveKids

```{r}
# Wage_bin vs HaveKids
ggbarstats(joined_table, 
           x = Wage_bin, 
           y = haveKids)
```
:::

**Significant Test of Association between** **Wage_bin vs educationLevel:**

The result of this test suggests that there is a significant association between the variables "Wage_bin" and "educationLevel" in the dataset, as indicated by the low p-value (p=2.82e-69) and the high value of the `X2pearson` statistic (X2pearson(9)=346.91).

The `V ̂cramer`statistic also indicates a moderate degree of association (V ̂ cramer =0.36). The `CI95%`\[0.32,1.00\] suggests that there is a 95% chance that the true value of the association between these variables falls within this interval, with a lower bound of 0.32 and an upper bound of 1.00.

Finally, the Nobs value of 880 indicates that there were 880 observations used in the analysis.

**Insight:**

1\. There is a significant association between "Wage_bin" and "educationLevel" in the dataset.

\- Nearly half of the survey participants belong to the high school or college student, or low education group, who report a relatively lower average monthly income.

\- Graduates have the highest representation in the high income group, followed by those with a bachelor's degree.

2\. There is no association between the variables "Wage_bin" and " Age_bin", with P value = 0.44.

3\. There is a significant association between the variables "Wage_bin" and " haveKids" in the dataset, people tend to have kids when they have a relatively higher income.

### 3.2.3 Boxplot of Saving Ratio/Total_Expenditure

A boxplot, also known as a box and whisker plot, is a graphical representation used to display the spread and central tendency of a dataset. It provides measures of spread such as the interquartile range and mean, as well as measures of center such as the median and mean.

#### Boxplot of Saving Ratio

```{r}
#Create a box plot using plot_ly with specified layout and drop-down menu options
plot_ly(data = joined_table,
        x = ~educationLevel,
        y = ~Saving_Ratio,
        line = list(width =1),
        type = "box",
        colors = "YlGnBu",
        showlegend = FALSE,
        boxmean = TRUE
        ) %>%
 
  # Adding layout options, including a drop-down menu for selecting factors
  layout(title = "Boxplot of Saving Ratio by Selected Factors ",
         xaxis = list(title = ""),
         yaxis = list(title = "Saving Ratio"),
         
         updatemenus = list(list(type = 'dropdown',
                         xref = "paper",
                         yref = "paper",
                         xanchor = "left",
                         x = 0.01, 
                         y = 0.99,
                         buttons = list(
                           list(method = "update",
                                args = list(list(x = list(joined_table$educationLevel)),
                                            list(xaxis = list(categoryorder = "category ascending"))),
                                label = "educationLevel"),
                           list(method = "update",
                                args = list(list(x = list(joined_table$haveKids)),
                                            list(xaxis = list(categoryorder = "category ascending"))),
                                label = "haveKids"),
                          list(method = "update",
                                args = list(list(x = list(joined_table$householdSize)),
                                            list(xaxis = list(categoryorder = "category ascending"))),
                                label = "householdSize")
                           
                         )
                    )
         )

)

```

-   **Saving Ratio vs Education Level:** it can be observed that graduates have the highest mean saving ratio, while those with low education level have the lowest mean saving ratio. Moreover, it is worth noting that there is a higher presence of outliers for the group of graduates.

-   **Saving Ratio vs Have Kids:** the box plot indicates that both groups, i.e., those with and without kids, have similar mean and median saving ratios. However, the dispersion, as measured by the interquartile range, is smaller for the group of individuals who have kids.

-   **Saving Ratio vs Household Size:** the box plot reveals that the median saving ratio for households with two people is lower compared to those household size with one or three people. Additionally, the group with one person in the household has the largest dispersion of saving ratios.

#### Boxplot of Total_Expenditure

```{r}
# Create new column  "Total_livingcost" by taking the absolute value of "Total_Expenditure".
joined_table$Total_livingcost <- abs(joined_table$Total_Expenditure)

#Create a box plot using plot_ly with specified layout and drop-down menu options
plot_ly(data = joined_table,
        x = ~educationLevel,
        y = ~Total_livingcost,
        line = list(width =1),
        type = "box",
        colors = "YlGnBu",
        showlegend = FALSE,
        boxmean = TRUE
        ) %>%
 
  # Adding layout options, including a drop-down menu for selecting factors
  layout(title = "Boxplot of Total_Expenditure by selected factors ",
         xaxis = list(title = ""),
         yaxis = list(title = "Total_Expenditure"),
         
         updatemenus = list(list(type = 'dropdown',
                         xref = "paper",
                         yref = "paper",
                         xanchor = "left",
                         x = 0.01, 
                         y = 0.99,
                         buttons = list(
                           list(method = "update",
                                args = list(list(x = list(joined_table$educationLevel)),
                                            list(xaxis = list(categoryorder = "category ascending"))),
                                label = "educationLevel"),
                           list(method = "update",
                                args = list(list(x = list(joined_table$haveKids)),
                                            list(xaxis = list(categoryorder = "category ascending"))),
                                label = "haveKids"),
                          list(method = "update",
                                args = list(list(x = list(joined_table$householdSize)),
                                            list(xaxis = list(categoryorder = "category ascending"))),
                                label = "householdSize")
                              
                           
                         )
                    )
         )

)

```

-   **Total Expenditure vs Education Level:** the mean monthly living cost does not vary significantly among different education levels. Besides, the dispersion of the monthly living cost is smaller for individuals with a lower level of education and for those with a high school or college degree, compared to those with a bachelor's or graduate degree.

-   **Total Expenditure vs Have Kids :** In comparing the mean monthly living costs of demographic groups with and without children, it was found that households with children experience a higher mean average monthly cost of living compared to those without.

-   **Total Expenditure vs household size :** it can be observed that as the household size increases, the total living cost also increases.

## 3.3 Analysis on Joviality

Maintaining a jovial attitude can be a contributing factor to a more harmonious social environment and can improve overall well-being. In this section, we will conduct an analysis of the factors that affect citizens' joviality and explore the differences in joviality levels across various demographic groups.

### 3.3.1 Significant Test of Correlation

```{r}
# Define two scatter plots with ggscatterstats function
p1 <- ggscatterstats(
data = joined_table,
x = Saving_Ratio,
y = joviality,
marginal = FALSE,
) +
#Set the horizontal position of the title to the center of the plot
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("Joviality and Saving_Ratio")

p2 <- ggscatterstats(
data = joined_table,
x = Wage,
y = joviality,
marginal = FALSE,
) +
#Set the horizontal position of the title to the center of the plot
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("Joviality and Wage")

p1 + p2

```

```{r}
# Define two scatter plots with ggscatterstats function
joined_table$Recreation_cost <- abs(joined_table$Recreation)
p3 <- ggscatterstats(
data = joined_table,
x = Recreation_cost,
y = joviality,
marginal = FALSE,
) +
#Set the horizontal position of the title to the center of the plot
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("Joviality and Recreation_cost")

joined_table$Food_cost <- abs(joined_table$Food)
p4 <- ggscatterstats(
data = joined_table,
x = Food_cost,
y = joviality,
marginal = FALSE,
) +
#Set the horizontal position of the title to the center of the plot
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("Joviality and Food_cost")

p3+p4
```

These results suggest that there are significant correlations between joviality and the variables of Saving_Ratio, Recreation, and Food, but a weaker correlation with Wage.

-   The p-values for all four tests are very small, indicating a low likelihood of obtaining such strong correlations by chance.

-   The signs of the correlation coefficients suggest that as Recreation, and Food increase, Joviality tends to increase as well, whereas for saving ratio and Wage, Joviality tends to decrease as these two variables increases.

-   The correlation coefficient rPreason measures the strength and direction of the linear relationship between the variables. In this case, a value of -0.56, -0.3, 0.55, and 0.57 respectively suggests a moderate to strong negative correlation for Saving_Ratio and Wage, and moderate to strong positive correlation for Recreation and Food.

### 3.3.2 Oneway ANOVA Test of Joviality

### Normality Assumption

Before performing the necessary hypothesis testing, we need to choose between parametric and non-parametric test. perform Shapiro-Wilk normality test with confidence level of 95% to test the null hypothesis that the joviality by different factor(education_level,age,have kids) is normally distributed.

::: panel-tabset
## Joviality by EducationLevel

```{r}
# Create a data frame with two variables
df <- data.frame(
  group = joined_table$educationLevel,
  joviality = joined_table$joviality
)

# Create a QQ plot with a normal distribution line 
qq_plot <- ggplot(df, aes(sample = joviality)) +
  stat_qq() + 
  stat_qq_line() +
  facet_wrap(~group)

# Perform Shapiro-Wilk normality test 
table_gts <- lapply(unique(df$group), function(x) {
  sw_t <- df %>%
    filter(group == x) %>%
    shapiro_test(joviality) %>%
    gt()
  tmp <- tempfile(fileext = '.png')
  gtsave(sw_t, tmp)
  png::readPNG(tmp, native = TRUE)
})

# Arrange the QQ plots of each education level group in a grid
ggarrange(qq_plot, ncol = 1, nrow = 1)


```

## Joviality by Age_bin

```{r}

# Create a data frame with two variables
df <- data.frame(
  group = joined_table$age_bin,
  joviality = joined_table$joviality
)

# Create a QQ plot with a normal distribution line 
qq_plot <- ggplot(df, aes(sample = joviality)) +
  stat_qq() + 
  stat_qq_line() +
  facet_wrap(~group)

# Perform Shapiro-Wilk normality test 
table_gts <- lapply(unique(df$group), function(x) {
  sw_t <- df %>%
    filter(group == x) %>%
    shapiro_test(joviality) %>%
    gt()
  tmp <- tempfile(fileext = '.png')
  gtsave(sw_t, tmp)
  png::readPNG(tmp, native = TRUE)
})


# Arrange the QQ plots of each education level group in a grid
ggarrange(qq_plot, ncol = 1, nrow = 1)

```

## Joviality by HaveKids

```{r}
# Create a data frame with two variables
df <- data.frame(
  group = joined_table$haveKids,
  joviality = joined_table$joviality
)

# Create a QQ plot with a normal distribution line
qq_plot <- ggplot(df, aes(sample = joviality)) +
  stat_qq() + 
  stat_qq_line() +
  facet_wrap(~group)

# Perform Shapiro-Wilk normality test 
table_gts <- lapply(unique(df$group), function(x) {
  sw_t <- df %>%
    filter(group == x) %>%
    shapiro_test(joviality) %>%
    gt()
  tmp <- tempfile(fileext = '.png')
  gtsave(sw_t, tmp)
  png::readPNG(tmp, native = TRUE)
})

# Arrange the QQ plots of each education level group in a grid
ggarrange(qq_plot, ncol = 1, nrow = 1)

```
:::

Based on the result above, the null hypothesis is rejected as some of the distributions are below 0.05 critical value. As such, we are not able to confirm normality assumption for distribution of joviality by education_level/age/have kids.

::: callout-note
Since we are unable to confirm normality assumption, non-parametric test (Kruskal-Wallis and Mann-Whitney) will be used for hypothesis testing. Note that the null hypothesis is no difference between median joviality by EducationLevel/Age_bin/HaveKids.
:::

::: panel-tabset
## Joviality by EducationLevel

```{r}
#set the color pallete
col13_1 <- c("dodgerblue2", "#E31A1C", 
  "green4",
  "#6A3D9A", 
  "#FF7F00", 
  "gray30", "gold1",
  "skyblue2", "#FB9A99", 
  "palegreen2",
  "#CAB2D6", 
  "#FDBF6F", 
  "gray80") 
  
#Initiating the base plot
p1 <- ggbetweenstats(
  data = joined_table|> 
    group_by(educationLevel),
  x = educationLevel, 
  y = joviality, 
  ylab = "joviality",
  title = "One-way ANOVA Reveal Difference on Joviality across Different Education Level",
  type = "np", 
  pairwise.comparisons = TRUE,
  pairwise.display = "ns",
  mean.ci = TRUE,
  p.adjust.method = "fdr", 
  messages = FALSE 
  ) +
  scale_color_manual(values = col13_1) +
  theme(axis.title.x = element_blank()) +
  scale_y_continuous(limits = c(0, 1))

p1

```

## Joviality by Age_bin

```{r}
#set the color pallete
col13_1 <- c("dodgerblue2", "#E31A1C", 
  "green4",
  "#6A3D9A", 
  "#FF7F00", 
  "gray30", "gold1",
  "skyblue2", "#FB9A99", 
  "palegreen2",
  "#CAB2D6", 
  "#FDBF6F", 
  "gray80") 
  
#Initiating the base plot
p2 <- ggbetweenstats(
  data = joined_table|> 
    group_by(age_bin),
  x = age_bin, 
  y = joviality, 
  ylab = "joviality",
  title = "One-way ANOVA Reveal Difference on Joviality across Different Age Range",
  type = "np", 
  pairwise.comparisons = TRUE,
  pairwise.display = "ns",
  mean.ci = TRUE,
  p.adjust.method = "fdr", 
  messages = FALSE 
  ) +
  scale_color_manual(values = col13_1) +
  theme(axis.title.x = element_blank()) +
  scale_y_continuous(limits = c(0, 1))

p2

```

## Joviality by HaveKids

```{r}
ggbetweenstats(
  data = joined_table,
  x = haveKids, 
  y = joviality,
  type = "np",
  messages = FALSE
)
```
:::

-   **Joviality by EducationLevel:** based on the statistical analysis conducted, the p-value was found to be less than the critical value of 0.05. Therefore, there is sufficient statistical evidence to reject the null hypothesis and conclude that there is a difference in median joviality between different education level groups.

-   **Joviality by Age/haveKids:** the statistical analysis did not provide enough evidence to reject the null hypothesis. Therefore, we can conclude that there is no significant difference in median joviality for different age ranges or whether individuals have kids.

### 3.3.3 Visualising Uncertainty

While it may seem appealing to regard a point estimate such as the median as an accurate reflection of the true value of the data, it's important to acknowledge that there may be inherent uncertainties associated with point estimates.

```{r}
# Create a gradient + interval plot to visualize the confidence intervals of mean joviality
joined_table %>%
  ggplot(aes(x = educationLevel, 
             y = joviality)) + 
  # Add a gradient plot with confidence intervals
  stat_gradientinterval(   
    fill = "skyblue",      
    show.legend = TRUE     
  ) +                        
  labs(
    title = "Visualising confidence intervals of mean joviality",
    subtitle = "Gradient + interval plot")
```
